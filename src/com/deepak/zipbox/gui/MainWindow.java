/*
 This file is part of Zipbox v0.1

 Zipbox is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Zipbox is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with Zipbox.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.zipbox.gui;

import com.deepak.zipbox.core.ZipFileFilter;
import com.deepak.zipbox.core.Zipper;
import com.deepak.zipbox.utils.UniqueFileFilter;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author deepak
 */
public class MainWindow extends javax.swing.JFrame implements DropTargetListener {

    // the zipper object
    private Zipper zipper = null;

    /**
     * the drag and drop objects
     */
    private DropTarget dropTarget = null;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        // create the zipper object
        zipper = new Zipper();

        // set the window icon
        try {
            this.setIconImage(ImageIO.read(getClass().getResource("/com/deepak/zipbox/gui/resources/box_16.png")));
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Set up our image label to recieve drops...
        // This class will handle drop events
        dropTarget = new DropTarget(imageLabel, this);

        // centre the frame
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((screen.getWidth() - getWidth()) / 2);
        int y = (int) ((screen.getHeight() - getHeight()) / 2);
        setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aboutPopupMenu = new javax.swing.JPopupMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        imageLabel = new javax.swing.JLabel();

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/zipbox/gui/resources/about.png"))); // NOI18N
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        aboutPopupMenu.add(aboutMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Zipbox");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/zipbox/gui/resources/box_150.png"))); // NOI18N
        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imageLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // check if the zipper is running 
        if (zipper.isRunning()) {
            // ask the user whether to exit
            int result = JOptionPane.showConfirmDialog(null,
                    "Zipper in action! Exit?",
                    "Exit",
                    JOptionPane.YES_NO_OPTION);

            // if not yes then do nothing and return
            if (result != JOptionPane.YES_OPTION) {
                return;
            }
        }

        // else exit the app
        // turn off visibility 
        this.setVisible(false);
        // dispose any gui resources
        this.dispose();
        // call garbage collector
        System.gc();
        // exit the app
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void imageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseClicked
        // popup the pop-up menu on right click
        if (evt.getButton() == MouseEvent.BUTTON3) {
            aboutPopupMenu.show(this, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_imageLabelMouseClicked

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // show the about content
        new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainWindow().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPopupMenu aboutPopupMenu;
    private javax.swing.JLabel imageLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void dragEnter(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dragOver(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dropActionChanged(DropTargetDragEvent dtde) {
        // do nothing
    }

    @Override
    public void dragExit(DropTargetEvent dte) {
        // do nothing
    }

    /**
     * method called on drag and drop
     *
     * @param dropEvent
     */
    @Override
    public void drop(DropTargetDropEvent dropEvent) {
        try {
            // get the dropped object and check its type
            Transferable transferable = dropEvent.getTransferable();
            // get the data flavors
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            // check if the flavor is of file list type
            if (flavors[0].isFlavorJavaFileListType()) {
                // if yes then accept copy drops
                dropEvent.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                // get the files list
                List list = (List) transferable.getTransferData(flavors[0]);

                // if there is more than one file
                if (list.size() > 1) {
                    // more than one files - zipping
                    // get the file path of the first file
                    String filePath = ((File) list.get(0)).getAbsolutePath();
                    // just get the file name only without the extension
                    if (filePath.contains(".")) {
                        filePath = filePath.substring(0, filePath.lastIndexOf("."));
                    }
                    // add the new .zip extension
                    filePath = filePath + ".zip";
                    // create the output file
                    File outputFile = new File(filePath);
                    // # update in v0.1.1 
                    // if the zip file already exists then add a counter to it
                    // a.zip -> a(1).zip
                    outputFile = new UniqueFileFilter().filter(outputFile);
                    // create a file array with the dropped files count as size
                    File[] fileList = new File[list.size()];
                    // now populate the array with the dropped files reference
                    for (int i = 0; i < list.size(); i++) {
                        fileList[i] = (File) list.get(i);
                    }
                    // zip it with zipper
                    zipper.zip(fileList, outputFile);
                } else {
                    // else if there is only one file
                    // get the file
                    File file = (File) list.get(0);
                    // now check whether its a zip file or not
                    if (new ZipFileFilter().accept(file)) {
                        // if single file and zip file then go for extraction
                        // get the folder path for the extracted save folder
                        String folderPath = file.getAbsolutePath();
                        // if the file contains the extension then
                        if (folderPath.contains(".")) {
                            // set the path till the extension
                            folderPath = folderPath.substring(0, folderPath.lastIndexOf("."));
                        }
                        // create the folder
                        File outputFolder = new File(folderPath);
                        // # update in v0.1.1 
                        // if the folder already exists then add a counter to it
                        // a -> a(1)
                        outputFolder = new UniqueFileFilter().filter(outputFolder);
                        outputFolder.mkdir();
                        // unzip using zipper
                        zipper.unZip(file, outputFolder);
                    } else {
                        // else if there is only a single file and its a normal file
                        // then go for compression
                        // get the file path
                        String filePath = file.getAbsolutePath();
                        // get the dile name only without the extension
                        if (filePath.contains(".")) {
                            filePath = filePath.substring(0, filePath.lastIndexOf("."));
                        }
                        // add the zip extension
                        filePath = filePath + ".zip";

                        // create the file
                        File outputFile = new File(filePath);
                        // # update in v0.1.1 
                        // if the zip file already exists then add a counter to it
                        // a.zip -> a(1).zip
                        outputFile = new UniqueFileFilter().filter(outputFile);
                        // zip using zipper
                        zipper.zip(file, outputFile);
                    }
                }
                // notify the drop complete
                dropEvent.dropComplete(true);
                // return the call
                return;
            }
            // else if the user dropped a non text file then reject drop
            dropEvent.rejectDrop();
        } catch (UnsupportedFlavorException | IOException e) {
            dropEvent.rejectDrop();
        }
    }
}
